/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameCenterMatchmakingTestRequestInlineCreateAttributes {
    #[serde(rename = "requestName")]
    pub request_name: String,
    #[serde(rename = "secondsInQueue")]
    pub seconds_in_queue: i32,
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<Locale>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<models::Location>>,
    #[serde(rename = "minPlayers", skip_serializing_if = "Option::is_none")]
    pub min_players: Option<i32>,
    #[serde(rename = "maxPlayers", skip_serializing_if = "Option::is_none")]
    pub max_players: Option<i32>,
    #[serde(rename = "playerCount", skip_serializing_if = "Option::is_none")]
    pub player_count: Option<i32>,
    #[serde(rename = "bundleId")]
    pub bundle_id: String,
    #[serde(rename = "platform")]
    pub platform: models::Platform,
    #[serde(rename = "appVersion")]
    pub app_version: String,
}

impl GameCenterMatchmakingTestRequestInlineCreateAttributes {
    pub fn new(request_name: String, seconds_in_queue: i32, bundle_id: String, platform: models::Platform, app_version: String) -> GameCenterMatchmakingTestRequestInlineCreateAttributes {
        GameCenterMatchmakingTestRequestInlineCreateAttributes {
            request_name,
            seconds_in_queue,
            locale: None,
            location: None,
            min_players: None,
            max_players: None,
            player_count: None,
            bundle_id,
            platform,
            app_version,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Locale {
    #[serde(rename = "AR-SA")]
    ArSa,
    #[serde(rename = "CA-ES")]
    CaEs,
    #[serde(rename = "CS-CZ")]
    CsCz,
    #[serde(rename = "DA-DK")]
    DaDk,
    #[serde(rename = "DE-DE")]
    DeDe,
    #[serde(rename = "EL-GR")]
    ElGr,
    #[serde(rename = "EN-AU")]
    EnAu,
    #[serde(rename = "EN-GB")]
    EnGb,
    #[serde(rename = "EN-US")]
    EnUs,
    #[serde(rename = "EN-KY")]
    EnKy,
    #[serde(rename = "ES-ES")]
    EsEs,
    #[serde(rename = "ES-MX")]
    EsMx,
    #[serde(rename = "FI-FI")]
    FiFi,
    #[serde(rename = "FR-CA")]
    FrCa,
    #[serde(rename = "FR-FR")]
    FrFr,
    #[serde(rename = "HI-IN")]
    HiIn,
    #[serde(rename = "HR-HR")]
    HrHr,
    #[serde(rename = "HU-HU")]
    HuHu,
    #[serde(rename = "ID-ID")]
    IdId,
    #[serde(rename = "IT-IT")]
    ItIt,
    #[serde(rename = "IW-IL")]
    IwIl,
    #[serde(rename = "JA-JP")]
    JaJp,
    #[serde(rename = "KO-KR")]
    KoKr,
    #[serde(rename = "MS-MY")]
    MsMy,
    #[serde(rename = "NL-NL")]
    NlNl,
    #[serde(rename = "NO-NO")]
    NoNo,
    #[serde(rename = "PL-PL")]
    PlPl,
    #[serde(rename = "PT-BR")]
    PtBr,
    #[serde(rename = "PT-PT")]
    PtPt,
    #[serde(rename = "RO-RO")]
    RoRo,
    #[serde(rename = "RU-RU")]
    RuRu,
    #[serde(rename = "SK-SK")]
    SkSk,
    #[serde(rename = "SV-SE")]
    SvSe,
    #[serde(rename = "TH-TH")]
    ThTh,
    #[serde(rename = "TR-TR")]
    TrTr,
    #[serde(rename = "UK-UA")]
    UkUa,
    #[serde(rename = "ZH-CN")]
    ZhCn,
    #[serde(rename = "ZH-TW")]
    ZhTw,
    #[serde(rename = "ZH-HK")]
    ZhHk,
}

impl Default for Locale {
    fn default() -> Locale {
        Self::ArSa
    }
}

