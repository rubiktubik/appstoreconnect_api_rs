/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AppVersionState {
    #[serde(rename = "ACCEPTED")]
    Accepted,
    #[serde(rename = "DEVELOPER_REJECTED")]
    DeveloperRejected,
    #[serde(rename = "IN_REVIEW")]
    InReview,
    #[serde(rename = "INVALID_BINARY")]
    InvalidBinary,
    #[serde(rename = "METADATA_REJECTED")]
    MetadataRejected,
    #[serde(rename = "PENDING_APPLE_RELEASE")]
    PendingAppleRelease,
    #[serde(rename = "PENDING_DEVELOPER_RELEASE")]
    PendingDeveloperRelease,
    #[serde(rename = "PREPARE_FOR_SUBMISSION")]
    PrepareForSubmission,
    #[serde(rename = "PROCESSING_FOR_DISTRIBUTION")]
    ProcessingForDistribution,
    #[serde(rename = "READY_FOR_DISTRIBUTION")]
    ReadyForDistribution,
    #[serde(rename = "READY_FOR_REVIEW")]
    ReadyForReview,
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "REPLACED_WITH_NEW_VERSION")]
    ReplacedWithNewVersion,
    #[serde(rename = "WAITING_FOR_EXPORT_COMPLIANCE")]
    WaitingForExportCompliance,
    #[serde(rename = "WAITING_FOR_REVIEW")]
    WaitingForReview,

}

impl std::fmt::Display for AppVersionState {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Accepted => write!(f, "ACCEPTED"),
            Self::DeveloperRejected => write!(f, "DEVELOPER_REJECTED"),
            Self::InReview => write!(f, "IN_REVIEW"),
            Self::InvalidBinary => write!(f, "INVALID_BINARY"),
            Self::MetadataRejected => write!(f, "METADATA_REJECTED"),
            Self::PendingAppleRelease => write!(f, "PENDING_APPLE_RELEASE"),
            Self::PendingDeveloperRelease => write!(f, "PENDING_DEVELOPER_RELEASE"),
            Self::PrepareForSubmission => write!(f, "PREPARE_FOR_SUBMISSION"),
            Self::ProcessingForDistribution => write!(f, "PROCESSING_FOR_DISTRIBUTION"),
            Self::ReadyForDistribution => write!(f, "READY_FOR_DISTRIBUTION"),
            Self::ReadyForReview => write!(f, "READY_FOR_REVIEW"),
            Self::Rejected => write!(f, "REJECTED"),
            Self::ReplacedWithNewVersion => write!(f, "REPLACED_WITH_NEW_VERSION"),
            Self::WaitingForExportCompliance => write!(f, "WAITING_FOR_EXPORT_COMPLIANCE"),
            Self::WaitingForReview => write!(f, "WAITING_FOR_REVIEW"),
        }
    }
}

impl Default for AppVersionState {
    fn default() -> AppVersionState {
        Self::Accepted
    }
}

