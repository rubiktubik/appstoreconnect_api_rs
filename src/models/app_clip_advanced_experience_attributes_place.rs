/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppClipAdvancedExperienceAttributesPlace {
    #[serde(rename = "placeId", skip_serializing_if = "Option::is_none")]
    pub place_id: Option<String>,
    #[serde(rename = "names", skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(rename = "mainAddress", skip_serializing_if = "Option::is_none")]
    pub main_address: Option<Box<models::AppClipAdvancedExperienceAttributesPlaceMainAddress>>,
    #[serde(rename = "displayPoint", skip_serializing_if = "Option::is_none")]
    pub display_point: Option<Box<models::AppClipAdvancedExperienceAttributesPlaceDisplayPoint>>,
    #[serde(rename = "mapAction", skip_serializing_if = "Option::is_none")]
    pub map_action: Option<MapAction>,
    #[serde(rename = "relationship", skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Relationship>,
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<Box<models::AppClipAdvancedExperienceAttributesPlacePhoneNumber>>,
    #[serde(rename = "homePage", skip_serializing_if = "Option::is_none")]
    pub home_page: Option<String>,
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
}

impl AppClipAdvancedExperienceAttributesPlace {
    pub fn new() -> AppClipAdvancedExperienceAttributesPlace {
        AppClipAdvancedExperienceAttributesPlace {
            place_id: None,
            names: None,
            main_address: None,
            display_point: None,
            map_action: None,
            relationship: None,
            phone_number: None,
            home_page: None,
            categories: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MapAction {
    #[serde(rename = "BUY_TICKETS")]
    BuyTickets,
    #[serde(rename = "VIEW_AVAILABILITY")]
    ViewAvailability,
    #[serde(rename = "VIEW_PRICING")]
    ViewPricing,
    #[serde(rename = "HOTEL_BOOK_ROOM")]
    HotelBookRoom,
    #[serde(rename = "PARKING_RESERVE_PARKING")]
    ParkingReserveParking,
    #[serde(rename = "RESTAURANT_JOIN_WAITLIST")]
    RestaurantJoinWaitlist,
    #[serde(rename = "RESTAURANT_ORDER_DELIVERY")]
    RestaurantOrderDelivery,
    #[serde(rename = "RESTAURANT_ORDER_FOOD")]
    RestaurantOrderFood,
    #[serde(rename = "RESTAURANT_ORDER_TAKEOUT")]
    RestaurantOrderTakeout,
    #[serde(rename = "RESTAURANT_RESERVATION")]
    RestaurantReservation,
    #[serde(rename = "SCHEDULE_APPOINTMENT")]
    ScheduleAppointment,
    #[serde(rename = "RESTAURANT_VIEW_MENU")]
    RestaurantViewMenu,
    #[serde(rename = "THEATER_NOW_PLAYING")]
    TheaterNowPlaying,
}

impl Default for MapAction {
    fn default() -> MapAction {
        Self::BuyTickets
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Relationship {
    #[serde(rename = "OWNER")]
    Owner,
    #[serde(rename = "AUTHORIZED")]
    Authorized,
    #[serde(rename = "OTHER")]
    Other,
}

impl Default for Relationship {
    fn default() -> Relationship {
        Self::Owner
    }
}

