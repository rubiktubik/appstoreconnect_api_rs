/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppClipDomainStatusAttributesDomainsInner {
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(rename = "isValid", skip_serializing_if = "Option::is_none")]
    pub is_valid: Option<bool>,
    #[serde(rename = "lastUpdatedDate", skip_serializing_if = "Option::is_none")]
    pub last_updated_date: Option<String>,
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<ErrorCode>,
}

impl AppClipDomainStatusAttributesDomainsInner {
    pub fn new() -> AppClipDomainStatusAttributesDomainsInner {
        AppClipDomainStatusAttributesDomainsInner {
            domain: None,
            is_valid: None,
            last_updated_date: None,
            error_code: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ErrorCode {
    #[serde(rename = "BAD_HTTP_RESPONSE")]
    BadHttpResponse,
    #[serde(rename = "BAD_JSON_CONTENT")]
    BadJsonContent,
    #[serde(rename = "BAD_PKCS7_SIGNATURE")]
    BadPkcs7Signature,
    #[serde(rename = "CANNOT_REACH_AASA_FILE")]
    CannotReachAasaFile,
    #[serde(rename = "DNS_ERROR")]
    DnsError,
    #[serde(rename = "INSECURE_REDIRECTS_FORBIDDEN")]
    InsecureRedirectsForbidden,
    #[serde(rename = "INVALID_ENTITLEMENT_MISSING_SECTION")]
    InvalidEntitlementMissingSection,
    #[serde(rename = "INVALID_ENTITLEMENT_SYNTAX_ERROR")]
    InvalidEntitlementSyntaxError,
    #[serde(rename = "INVALID_ENTITLEMENT_UNHANDLED_SECTION")]
    InvalidEntitlementUnhandledSection,
    #[serde(rename = "INVALID_ENTITLEMENT_UNKNOWN_ID")]
    InvalidEntitlementUnknownId,
    #[serde(rename = "NETWORK_ERROR")]
    NetworkError,
    #[serde(rename = "NETWORK_ERROR_TEMPORARY")]
    NetworkErrorTemporary,
    #[serde(rename = "OTHER_ERROR")]
    OtherError,
    #[serde(rename = "TIMEOUT")]
    Timeout,
    #[serde(rename = "TLS_ERROR")]
    TlsError,
    #[serde(rename = "UNEXPECTED_ERROR")]
    UnexpectedError,
}

impl Default for ErrorCode {
    fn default() -> ErrorCode {
        Self::BadHttpResponse
    }
}

