/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppEventAttributes {
    #[serde(rename = "referenceName", skip_serializing_if = "Option::is_none")]
    pub reference_name: Option<String>,
    #[serde(rename = "badge", skip_serializing_if = "Option::is_none")]
    pub badge: Option<Badge>,
    #[serde(rename = "eventState", skip_serializing_if = "Option::is_none")]
    pub event_state: Option<EventState>,
    #[serde(rename = "deepLink", skip_serializing_if = "Option::is_none")]
    pub deep_link: Option<String>,
    #[serde(rename = "purchaseRequirement", skip_serializing_if = "Option::is_none")]
    pub purchase_requirement: Option<String>,
    #[serde(rename = "primaryLocale", skip_serializing_if = "Option::is_none")]
    pub primary_locale: Option<String>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Priority>,
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Purpose>,
    #[serde(rename = "territorySchedules", skip_serializing_if = "Option::is_none")]
    pub territory_schedules: Option<Vec<models::AppEventAttributesTerritorySchedulesInner>>,
    #[serde(rename = "archivedTerritorySchedules", skip_serializing_if = "Option::is_none")]
    pub archived_territory_schedules: Option<Vec<models::AppEventAttributesTerritorySchedulesInner>>,
}

impl AppEventAttributes {
    pub fn new() -> AppEventAttributes {
        AppEventAttributes {
            reference_name: None,
            badge: None,
            event_state: None,
            deep_link: None,
            purchase_requirement: None,
            primary_locale: None,
            priority: None,
            purpose: None,
            territory_schedules: None,
            archived_territory_schedules: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Badge {
    #[serde(rename = "LIVE_EVENT")]
    LiveEvent,
    #[serde(rename = "PREMIERE")]
    Premiere,
    #[serde(rename = "CHALLENGE")]
    Challenge,
    #[serde(rename = "COMPETITION")]
    Competition,
    #[serde(rename = "NEW_SEASON")]
    NewSeason,
    #[serde(rename = "MAJOR_UPDATE")]
    MajorUpdate,
    #[serde(rename = "SPECIAL_EVENT")]
    SpecialEvent,
}

impl Default for Badge {
    fn default() -> Badge {
        Self::LiveEvent
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventState {
    #[serde(rename = "DRAFT")]
    Draft,
    #[serde(rename = "READY_FOR_REVIEW")]
    ReadyForReview,
    #[serde(rename = "WAITING_FOR_REVIEW")]
    WaitingForReview,
    #[serde(rename = "IN_REVIEW")]
    InReview,
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "ACCEPTED")]
    Accepted,
    #[serde(rename = "APPROVED")]
    Approved,
    #[serde(rename = "PUBLISHED")]
    Published,
    #[serde(rename = "PAST")]
    Past,
    #[serde(rename = "ARCHIVED")]
    Archived,
}

impl Default for EventState {
    fn default() -> EventState {
        Self::Draft
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Priority {
    #[serde(rename = "HIGH")]
    High,
    #[serde(rename = "NORMAL")]
    Normal,
}

impl Default for Priority {
    fn default() -> Priority {
        Self::High
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Purpose {
    #[serde(rename = "APPROPRIATE_FOR_ALL_USERS")]
    AppropriateForAllUsers,
    #[serde(rename = "ATTRACT_NEW_USERS")]
    AttractNewUsers,
    #[serde(rename = "KEEP_ACTIVE_USERS_INFORMED")]
    KeepActiveUsersInformed,
    #[serde(rename = "BRING_BACK_LAPSED_USERS")]
    BringBackLapsedUsers,
}

impl Default for Purpose {
    fn default() -> Purpose {
        Self::AppropriateForAllUsers
    }
}

