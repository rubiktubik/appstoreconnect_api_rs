/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use super::decimal::Decimal;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameCenterLeaderboardAttributes {
    #[serde(rename = "defaultFormatter", skip_serializing_if = "Option::is_none")]
    pub default_formatter: Option<models::GameCenterLeaderboardFormatter>,
    #[serde(rename = "referenceName", skip_serializing_if = "Option::is_none")]
    pub reference_name: Option<String>,
    #[serde(rename = "vendorIdentifier", skip_serializing_if = "Option::is_none")]
    pub vendor_identifier: Option<String>,
    #[serde(rename = "submissionType", skip_serializing_if = "Option::is_none")]
    pub submission_type: Option<SubmissionType>,
    #[serde(rename = "scoreSortType", skip_serializing_if = "Option::is_none")]
    pub score_sort_type: Option<ScoreSortType>,
    #[serde(rename = "scoreRangeStart", skip_serializing_if = "Option::is_none")]
    pub score_range_start: Option<Decimal>,
    #[serde(rename = "scoreRangeEnd", skip_serializing_if = "Option::is_none")]
    pub score_range_end: Option<Decimal>,
    #[serde(
        rename = "recurrenceStartDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub recurrence_start_date: Option<String>,
    #[serde(rename = "recurrenceDuration", skip_serializing_if = "Option::is_none")]
    pub recurrence_duration: Option<String>,
    #[serde(rename = "recurrenceRule", skip_serializing_if = "Option::is_none")]
    pub recurrence_rule: Option<String>,
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
}

impl GameCenterLeaderboardAttributes {
    pub fn new() -> GameCenterLeaderboardAttributes {
        GameCenterLeaderboardAttributes {
            default_formatter: None,
            reference_name: None,
            vendor_identifier: None,
            submission_type: None,
            score_sort_type: None,
            score_range_start: None,
            score_range_end: None,
            recurrence_start_date: None,
            recurrence_duration: None,
            recurrence_rule: None,
            archived: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubmissionType {
    #[serde(rename = "BEST_SCORE")]
    BestScore,
    #[serde(rename = "MOST_RECENT_SCORE")]
    MostRecentScore,
}

impl Default for SubmissionType {
    fn default() -> SubmissionType {
        Self::BestScore
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScoreSortType {
    #[serde(rename = "ASC")]
    Asc,
    #[serde(rename = "DESC")]
    Desc,
}

impl Default for ScoreSortType {
    fn default() -> ScoreSortType {
        Self::Asc
    }
}
