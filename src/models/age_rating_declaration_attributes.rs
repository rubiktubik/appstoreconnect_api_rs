/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgeRatingDeclarationAttributes {
    #[serde(rename = "alcoholTobaccoOrDrugUseOrReferences", skip_serializing_if = "Option::is_none")]
    pub alcohol_tobacco_or_drug_use_or_references: Option<AlcoholTobaccoOrDrugUseOrReferences>,
    #[serde(rename = "contests", skip_serializing_if = "Option::is_none")]
    pub contests: Option<Contests>,
    #[serde(rename = "gamblingAndContests", skip_serializing_if = "Option::is_none")]
    pub gambling_and_contests: Option<bool>,
    #[serde(rename = "gambling", skip_serializing_if = "Option::is_none")]
    pub gambling: Option<bool>,
    #[serde(rename = "gamblingSimulated", skip_serializing_if = "Option::is_none")]
    pub gambling_simulated: Option<GamblingSimulated>,
    #[serde(rename = "kidsAgeBand", skip_serializing_if = "Option::is_none")]
    pub kids_age_band: Option<models::KidsAgeBand>,
    #[serde(rename = "lootBox", skip_serializing_if = "Option::is_none")]
    pub loot_box: Option<bool>,
    #[serde(rename = "medicalOrTreatmentInformation", skip_serializing_if = "Option::is_none")]
    pub medical_or_treatment_information: Option<MedicalOrTreatmentInformation>,
    #[serde(rename = "profanityOrCrudeHumor", skip_serializing_if = "Option::is_none")]
    pub profanity_or_crude_humor: Option<ProfanityOrCrudeHumor>,
    #[serde(rename = "sexualContentGraphicAndNudity", skip_serializing_if = "Option::is_none")]
    pub sexual_content_graphic_and_nudity: Option<SexualContentGraphicAndNudity>,
    #[serde(rename = "sexualContentOrNudity", skip_serializing_if = "Option::is_none")]
    pub sexual_content_or_nudity: Option<SexualContentOrNudity>,
    #[serde(rename = "horrorOrFearThemes", skip_serializing_if = "Option::is_none")]
    pub horror_or_fear_themes: Option<HorrorOrFearThemes>,
    #[serde(rename = "matureOrSuggestiveThemes", skip_serializing_if = "Option::is_none")]
    pub mature_or_suggestive_themes: Option<MatureOrSuggestiveThemes>,
    #[serde(rename = "unrestrictedWebAccess", skip_serializing_if = "Option::is_none")]
    pub unrestricted_web_access: Option<bool>,
    #[serde(rename = "violenceCartoonOrFantasy", skip_serializing_if = "Option::is_none")]
    pub violence_cartoon_or_fantasy: Option<ViolenceCartoonOrFantasy>,
    #[serde(rename = "violenceRealisticProlongedGraphicOrSadistic", skip_serializing_if = "Option::is_none")]
    pub violence_realistic_prolonged_graphic_or_sadistic: Option<ViolenceRealisticProlongedGraphicOrSadistic>,
    #[serde(rename = "violenceRealistic", skip_serializing_if = "Option::is_none")]
    pub violence_realistic: Option<ViolenceRealistic>,
    #[serde(rename = "ageRatingOverride", skip_serializing_if = "Option::is_none")]
    pub age_rating_override: Option<AgeRatingOverride>,
    #[serde(rename = "koreaAgeRatingOverride", skip_serializing_if = "Option::is_none")]
    pub korea_age_rating_override: Option<KoreaAgeRatingOverride>,
    #[serde(rename = "seventeenPlus", skip_serializing_if = "Option::is_none")]
    pub seventeen_plus: Option<bool>,
}

impl AgeRatingDeclarationAttributes {
    pub fn new() -> AgeRatingDeclarationAttributes {
        AgeRatingDeclarationAttributes {
            alcohol_tobacco_or_drug_use_or_references: None,
            contests: None,
            gambling_and_contests: None,
            gambling: None,
            gambling_simulated: None,
            kids_age_band: None,
            loot_box: None,
            medical_or_treatment_information: None,
            profanity_or_crude_humor: None,
            sexual_content_graphic_and_nudity: None,
            sexual_content_or_nudity: None,
            horror_or_fear_themes: None,
            mature_or_suggestive_themes: None,
            unrestricted_web_access: None,
            violence_cartoon_or_fantasy: None,
            violence_realistic_prolonged_graphic_or_sadistic: None,
            violence_realistic: None,
            age_rating_override: None,
            korea_age_rating_override: None,
            seventeen_plus: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlcoholTobaccoOrDrugUseOrReferences {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for AlcoholTobaccoOrDrugUseOrReferences {
    fn default() -> AlcoholTobaccoOrDrugUseOrReferences {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Contests {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for Contests {
    fn default() -> Contests {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GamblingSimulated {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for GamblingSimulated {
    fn default() -> GamblingSimulated {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MedicalOrTreatmentInformation {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for MedicalOrTreatmentInformation {
    fn default() -> MedicalOrTreatmentInformation {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProfanityOrCrudeHumor {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for ProfanityOrCrudeHumor {
    fn default() -> ProfanityOrCrudeHumor {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SexualContentGraphicAndNudity {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for SexualContentGraphicAndNudity {
    fn default() -> SexualContentGraphicAndNudity {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SexualContentOrNudity {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for SexualContentOrNudity {
    fn default() -> SexualContentOrNudity {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HorrorOrFearThemes {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for HorrorOrFearThemes {
    fn default() -> HorrorOrFearThemes {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MatureOrSuggestiveThemes {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for MatureOrSuggestiveThemes {
    fn default() -> MatureOrSuggestiveThemes {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ViolenceCartoonOrFantasy {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for ViolenceCartoonOrFantasy {
    fn default() -> ViolenceCartoonOrFantasy {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ViolenceRealisticProlongedGraphicOrSadistic {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for ViolenceRealisticProlongedGraphicOrSadistic {
    fn default() -> ViolenceRealisticProlongedGraphicOrSadistic {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ViolenceRealistic {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "INFREQUENT_OR_MILD")]
    InfrequentOrMild,
    #[serde(rename = "FREQUENT_OR_INTENSE")]
    FrequentOrIntense,
}

impl Default for ViolenceRealistic {
    fn default() -> ViolenceRealistic {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AgeRatingOverride {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "SEVENTEEN_PLUS")]
    SeventeenPlus,
    #[serde(rename = "UNRATED")]
    Unrated,
}

impl Default for AgeRatingOverride {
    fn default() -> AgeRatingOverride {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum KoreaAgeRatingOverride {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "FIFTEEN_PLUS")]
    FifteenPlus,
    #[serde(rename = "NINETEEN_PLUS")]
    NineteenPlus,
}

impl Default for KoreaAgeRatingOverride {
    fn default() -> KoreaAgeRatingOverride {
        Self::None
    }
}

