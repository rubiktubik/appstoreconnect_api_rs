/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AppStoreVersionState {
    #[serde(rename = "ACCEPTED")]
    Accepted,
    #[serde(rename = "DEVELOPER_REMOVED_FROM_SALE")]
    DeveloperRemovedFromSale,
    #[serde(rename = "DEVELOPER_REJECTED")]
    DeveloperRejected,
    #[serde(rename = "IN_REVIEW")]
    InReview,
    #[serde(rename = "INVALID_BINARY")]
    InvalidBinary,
    #[serde(rename = "METADATA_REJECTED")]
    MetadataRejected,
    #[serde(rename = "PENDING_APPLE_RELEASE")]
    PendingAppleRelease,
    #[serde(rename = "PENDING_CONTRACT")]
    PendingContract,
    #[serde(rename = "PENDING_DEVELOPER_RELEASE")]
    PendingDeveloperRelease,
    #[serde(rename = "PREPARE_FOR_SUBMISSION")]
    PrepareForSubmission,
    #[serde(rename = "PREORDER_READY_FOR_SALE")]
    PreorderReadyForSale,
    #[serde(rename = "PROCESSING_FOR_APP_STORE")]
    ProcessingForAppStore,
    #[serde(rename = "READY_FOR_REVIEW")]
    ReadyForReview,
    #[serde(rename = "READY_FOR_SALE")]
    ReadyForSale,
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "REMOVED_FROM_SALE")]
    RemovedFromSale,
    #[serde(rename = "WAITING_FOR_EXPORT_COMPLIANCE")]
    WaitingForExportCompliance,
    #[serde(rename = "WAITING_FOR_REVIEW")]
    WaitingForReview,
    #[serde(rename = "REPLACED_WITH_NEW_VERSION")]
    ReplacedWithNewVersion,
    #[serde(rename = "NOT_APPLICABLE")]
    NotApplicable,

}

impl std::fmt::Display for AppStoreVersionState {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Accepted => write!(f, "ACCEPTED"),
            Self::DeveloperRemovedFromSale => write!(f, "DEVELOPER_REMOVED_FROM_SALE"),
            Self::DeveloperRejected => write!(f, "DEVELOPER_REJECTED"),
            Self::InReview => write!(f, "IN_REVIEW"),
            Self::InvalidBinary => write!(f, "INVALID_BINARY"),
            Self::MetadataRejected => write!(f, "METADATA_REJECTED"),
            Self::PendingAppleRelease => write!(f, "PENDING_APPLE_RELEASE"),
            Self::PendingContract => write!(f, "PENDING_CONTRACT"),
            Self::PendingDeveloperRelease => write!(f, "PENDING_DEVELOPER_RELEASE"),
            Self::PrepareForSubmission => write!(f, "PREPARE_FOR_SUBMISSION"),
            Self::PreorderReadyForSale => write!(f, "PREORDER_READY_FOR_SALE"),
            Self::ProcessingForAppStore => write!(f, "PROCESSING_FOR_APP_STORE"),
            Self::ReadyForReview => write!(f, "READY_FOR_REVIEW"),
            Self::ReadyForSale => write!(f, "READY_FOR_SALE"),
            Self::Rejected => write!(f, "REJECTED"),
            Self::RemovedFromSale => write!(f, "REMOVED_FROM_SALE"),
            Self::WaitingForExportCompliance => write!(f, "WAITING_FOR_EXPORT_COMPLIANCE"),
            Self::WaitingForReview => write!(f, "WAITING_FOR_REVIEW"),
            Self::ReplacedWithNewVersion => write!(f, "REPLACED_WITH_NEW_VERSION"),
            Self::NotApplicable => write!(f, "NOT_APPLICABLE"),
        }
    }
}

impl Default for AppStoreVersionState {
    fn default() -> AppStoreVersionState {
        Self::Accepted
    }
}

