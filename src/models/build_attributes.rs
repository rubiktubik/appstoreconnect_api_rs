/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildAttributes {
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "uploadedDate", skip_serializing_if = "Option::is_none")]
    pub uploaded_date: Option<String>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(rename = "expired", skip_serializing_if = "Option::is_none")]
    pub expired: Option<bool>,
    #[serde(rename = "minOsVersion", skip_serializing_if = "Option::is_none")]
    pub min_os_version: Option<String>,
    #[serde(rename = "lsMinimumSystemVersion", skip_serializing_if = "Option::is_none")]
    pub ls_minimum_system_version: Option<String>,
    #[serde(rename = "computedMinMacOsVersion", skip_serializing_if = "Option::is_none")]
    pub computed_min_mac_os_version: Option<String>,
    #[serde(rename = "iconAssetToken", skip_serializing_if = "Option::is_none")]
    pub icon_asset_token: Option<Box<models::ImageAsset>>,
    #[serde(rename = "processingState", skip_serializing_if = "Option::is_none")]
    pub processing_state: Option<ProcessingState>,
    #[serde(rename = "buildAudienceType", skip_serializing_if = "Option::is_none")]
    pub build_audience_type: Option<models::BuildAudienceType>,
    #[serde(rename = "usesNonExemptEncryption", skip_serializing_if = "Option::is_none")]
    pub uses_non_exempt_encryption: Option<bool>,
}

impl BuildAttributes {
    pub fn new() -> BuildAttributes {
        BuildAttributes {
            version: None,
            uploaded_date: None,
            expiration_date: None,
            expired: None,
            min_os_version: None,
            ls_minimum_system_version: None,
            computed_min_mac_os_version: None,
            icon_asset_token: None,
            processing_state: None,
            build_audience_type: None,
            uses_non_exempt_encryption: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProcessingState {
    #[serde(rename = "PROCESSING")]
    Processing,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "INVALID")]
    Invalid,
    #[serde(rename = "VALID")]
    Valid,
}

impl Default for ProcessingState {
    fn default() -> ProcessingState {
        Self::Processing
    }
}

