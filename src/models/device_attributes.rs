/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceAttributes {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "platform", skip_serializing_if = "Option::is_none")]
    pub platform: Option<models::BundleIdPlatform>,
    #[serde(rename = "udid", skip_serializing_if = "Option::is_none")]
    pub udid: Option<String>,
    #[serde(rename = "deviceClass", skip_serializing_if = "Option::is_none")]
    pub device_class: Option<DeviceClass>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(rename = "addedDate", skip_serializing_if = "Option::is_none")]
    pub added_date: Option<String>,
}

impl DeviceAttributes {
    pub fn new() -> DeviceAttributes {
        DeviceAttributes {
            name: None,
            platform: None,
            udid: None,
            device_class: None,
            status: None,
            model: None,
            added_date: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeviceClass {
    #[serde(rename = "APPLE_WATCH")]
    AppleWatch,
    #[serde(rename = "IPAD")]
    Ipad,
    #[serde(rename = "IPHONE")]
    Iphone,
    #[serde(rename = "IPOD")]
    Ipod,
    #[serde(rename = "APPLE_TV")]
    AppleTv,
    #[serde(rename = "MAC")]
    Mac,
}

impl Default for DeviceClass {
    fn default() -> DeviceClass {
        Self::AppleWatch
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ENABLED")]
    Enabled,
    #[serde(rename = "DISABLED")]
    Disabled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Enabled
    }
}

