/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AppClipAdvancedExperienceLanguage {
    #[serde(rename = "AR")]
    Ar,
    #[serde(rename = "CA")]
    Ca,
    #[serde(rename = "CS")]
    Cs,
    #[serde(rename = "DA")]
    Da,
    #[serde(rename = "DE")]
    De,
    #[serde(rename = "EL")]
    El,
    #[serde(rename = "EN")]
    En,
    #[serde(rename = "ES")]
    Es,
    #[serde(rename = "FI")]
    Fi,
    #[serde(rename = "FR")]
    Fr,
    #[serde(rename = "HE")]
    He,
    #[serde(rename = "HI")]
    Hi,
    #[serde(rename = "HR")]
    Hr,
    #[serde(rename = "HU")]
    Hu,
    #[serde(rename = "ID")]
    Id,
    #[serde(rename = "IT")]
    It,
    #[serde(rename = "JA")]
    Ja,
    #[serde(rename = "KO")]
    Ko,
    #[serde(rename = "MS")]
    Ms,
    #[serde(rename = "NL")]
    Nl,
    #[serde(rename = "NO")]
    No,
    #[serde(rename = "PL")]
    Pl,
    #[serde(rename = "PT")]
    Pt,
    #[serde(rename = "RO")]
    Ro,
    #[serde(rename = "RU")]
    Ru,
    #[serde(rename = "SK")]
    Sk,
    #[serde(rename = "SV")]
    Sv,
    #[serde(rename = "TH")]
    Th,
    #[serde(rename = "TR")]
    Tr,
    #[serde(rename = "UK")]
    Uk,
    #[serde(rename = "VI")]
    Vi,
    #[serde(rename = "ZH")]
    Zh,

}

impl std::fmt::Display for AppClipAdvancedExperienceLanguage {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Ar => write!(f, "AR"),
            Self::Ca => write!(f, "CA"),
            Self::Cs => write!(f, "CS"),
            Self::Da => write!(f, "DA"),
            Self::De => write!(f, "DE"),
            Self::El => write!(f, "EL"),
            Self::En => write!(f, "EN"),
            Self::Es => write!(f, "ES"),
            Self::Fi => write!(f, "FI"),
            Self::Fr => write!(f, "FR"),
            Self::He => write!(f, "HE"),
            Self::Hi => write!(f, "HI"),
            Self::Hr => write!(f, "HR"),
            Self::Hu => write!(f, "HU"),
            Self::Id => write!(f, "ID"),
            Self::It => write!(f, "IT"),
            Self::Ja => write!(f, "JA"),
            Self::Ko => write!(f, "KO"),
            Self::Ms => write!(f, "MS"),
            Self::Nl => write!(f, "NL"),
            Self::No => write!(f, "NO"),
            Self::Pl => write!(f, "PL"),
            Self::Pt => write!(f, "PT"),
            Self::Ro => write!(f, "RO"),
            Self::Ru => write!(f, "RU"),
            Self::Sk => write!(f, "SK"),
            Self::Sv => write!(f, "SV"),
            Self::Th => write!(f, "TH"),
            Self::Tr => write!(f, "TR"),
            Self::Uk => write!(f, "UK"),
            Self::Vi => write!(f, "VI"),
            Self::Zh => write!(f, "ZH"),
        }
    }
}

impl Default for AppClipAdvancedExperienceLanguage {
    fn default() -> AppClipAdvancedExperienceLanguage {
        Self::Ar
    }
}

