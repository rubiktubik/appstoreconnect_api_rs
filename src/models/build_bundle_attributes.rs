/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildBundleAttributes {
    #[serde(rename = "bundleId", skip_serializing_if = "Option::is_none")]
    pub bundle_id: Option<String>,
    #[serde(rename = "bundleType", skip_serializing_if = "Option::is_none")]
    pub bundle_type: Option<BundleType>,
    #[serde(rename = "sdkBuild", skip_serializing_if = "Option::is_none")]
    pub sdk_build: Option<String>,
    #[serde(rename = "platformBuild", skip_serializing_if = "Option::is_none")]
    pub platform_build: Option<String>,
    #[serde(rename = "fileName", skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(rename = "hasSirikit", skip_serializing_if = "Option::is_none")]
    pub has_sirikit: Option<bool>,
    #[serde(rename = "hasOnDemandResources", skip_serializing_if = "Option::is_none")]
    pub has_on_demand_resources: Option<bool>,
    #[serde(rename = "hasPrerenderedIcon", skip_serializing_if = "Option::is_none")]
    pub has_prerendered_icon: Option<bool>,
    #[serde(rename = "usesLocationServices", skip_serializing_if = "Option::is_none")]
    pub uses_location_services: Option<bool>,
    #[serde(rename = "isIosBuildMacAppStoreCompatible", skip_serializing_if = "Option::is_none")]
    pub is_ios_build_mac_app_store_compatible: Option<bool>,
    #[serde(rename = "includesSymbols", skip_serializing_if = "Option::is_none")]
    pub includes_symbols: Option<bool>,
    #[serde(rename = "dSYMUrl", skip_serializing_if = "Option::is_none")]
    pub d_sym_url: Option<String>,
    #[serde(rename = "supportedArchitectures", skip_serializing_if = "Option::is_none")]
    pub supported_architectures: Option<Vec<String>>,
    #[serde(rename = "requiredCapabilities", skip_serializing_if = "Option::is_none")]
    pub required_capabilities: Option<Vec<String>>,
    #[serde(rename = "deviceProtocols", skip_serializing_if = "Option::is_none")]
    pub device_protocols: Option<Vec<String>>,
    #[serde(rename = "locales", skip_serializing_if = "Option::is_none")]
    pub locales: Option<Vec<String>>,
    #[serde(rename = "entitlements", skip_serializing_if = "Option::is_none")]
    pub entitlements: Option<std::collections::HashMap<String, std::collections::HashMap<String, String>>>,
}

impl BuildBundleAttributes {
    pub fn new() -> BuildBundleAttributes {
        BuildBundleAttributes {
            bundle_id: None,
            bundle_type: None,
            sdk_build: None,
            platform_build: None,
            file_name: None,
            has_sirikit: None,
            has_on_demand_resources: None,
            has_prerendered_icon: None,
            uses_location_services: None,
            is_ios_build_mac_app_store_compatible: None,
            includes_symbols: None,
            d_sym_url: None,
            supported_architectures: None,
            required_capabilities: None,
            device_protocols: None,
            locales: None,
            entitlements: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BundleType {
    #[serde(rename = "APP")]
    App,
    #[serde(rename = "APP_CLIP")]
    AppClip,
}

impl Default for BundleType {
    fn default() -> BundleType {
        Self::App
    }
}

